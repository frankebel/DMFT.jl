using DMFT
using DMFT.Debug
using Fermions
using Fermions.Bits
using Fermions.Wavefunctions
using Test

@testset "Debug" begin
    @testset "get_excitation" begin
        f, e = mask_fe(UInt64, 4, 5, 6)
        @test get_excitation(UInt64(0b000000_11111_0000_000000_11111_0000), f, e) == 0
        # # flip all bits
        @test get_excitation(UInt64(0b111111_00000_0000_111111_00000_0000), f, e) == 22
        # # flip some bits
        @test get_excitation(UInt64(0b000000_11111_1111_000000_11111_1111), f, e) == 0
        @test get_excitation(UInt64(0b000000_11111_0000_000000_11110_0000), f, e) == 1
        @test get_excitation(UInt64(0b000000_11111_0000_000001_11111_0000), f, e) == 1
        @test get_excitation(UInt64(0b000000_11110_0000_000000_11111_0000), f, e) == 1
        @test get_excitation(UInt64(0b000001_11111_0000_000000_11111_0000), f, e) == 1
        @test get_excitation(UInt64(0b000000_11111_0000_000000_11100_0000), f, e) == 2
        @test get_excitation(UInt64(0b000000_11111_0000_000011_11111_0000), f, e) == 2
        @test get_excitation(UInt64(0b000000_11100_0000_000000_11111_0000), f, e) == 2
        @test get_excitation(UInt64(0b000011_11111_0000_000000_11111_0000), f, e) == 2
        @test get_excitation(UInt64(0b000000_11111_0000_000001_11110_0000), f, e) == 2
        @test get_excitation(UInt64(0b000001_11110_0000_000000_11111_0000), f, e) == 2
        @test get_excitation(UInt64(0b000000_11110_0000_000000_11110_0000), f, e) == 2
        @test get_excitation(UInt64(0b000001_11111_0000_000001_11111_0000), f, e) == 2
        @test get_excitation(UInt64(0b000001_11111_0000_000000_11110_0000), f, e) == 2
        @test get_excitation(UInt64(0b000000_11111_0000_000000_11000_0000), f, e) == 3
        @test get_excitation(UInt64(0b000000_11111_0000_000111_11111_0000), f, e) == 3
        @test get_excitation(UInt64(0b000000_11000_0000_000000_11111_0000), f, e) == 3
        @test get_excitation(UInt64(0b000111_11111_0000_000000_11111_0000), f, e) == 3
    end # get_excitation

    @testset "excitation!" begin
        f, e = mask_fe(UInt64, 4, 5, 6)
        d = Dict{UInt64,Vector{Int}}(
            0b000000_11111_0000_000000_11111_0000 => rand(Int, 2),
            0b111111_00000_0000_111111_00000_0000 => rand(Int, 2),
            0b000000_11111_1111_000000_11111_1111 => rand(Int, 2),
            0b000000_11111_0000_000000_11110_0000 => rand(Int, 2),
            0b000000_11111_0000_000001_11111_0000 => rand(Int, 2),
            0b000000_11110_0000_000000_11111_0000 => rand(Int, 2),
            0b000001_11111_0000_000000_11111_0000 => rand(Int, 2),
            0b000000_11111_0000_000000_11100_0000 => rand(Int, 2),
            0b000000_11111_0000_000011_11111_0000 => rand(Int, 2),
            0b000000_11100_0000_000000_11111_0000 => rand(Int, 2),
            0b000011_11111_0000_000000_11111_0000 => rand(Int, 2),
            0b000000_11111_0000_000001_11110_0000 => rand(Int, 2),
            0b000001_11110_0000_000000_11111_0000 => rand(Int, 2),
            0b000000_11110_0000_000000_11110_0000 => rand(Int, 2),
            0b000001_11111_0000_000001_11111_0000 => rand(Int, 2),
            0b000001_11111_0000_000000_11110_0000 => rand(Int, 2),
            0b000000_11111_0000_000000_11000_0000 => rand(Int, 2),
            0b000000_11111_0000_000111_11111_0000 => rand(Int, 2),
            0b000000_11000_0000_000000_11111_0000 => rand(Int, 2),
            0b000111_11111_0000_000000_11111_0000 => rand(Int, 2),
        )

        ψ = Wavefunction(copy(d))
        excitation!(ψ, f, e, 0)
        @test Set(keys(ψ)) == Set([
            0b000000_11111_0000_000000_11111_0000, 0b000000_11111_1111_000000_11111_1111
        ])

        ψ = Wavefunction(copy(d))
        excitation!(ψ, f, e, 1)
        @test Set(keys(ψ)) == Set([
            0b000000_11111_0000_000000_11111_0000,
            0b000000_11111_1111_000000_11111_1111,
            0b000000_11111_0000_000000_11110_0000,
            0b000000_11111_0000_000001_11111_0000,
            0b000000_11110_0000_000000_11111_0000,
            0b000001_11111_0000_000000_11111_0000,
        ])

        ψ = Wavefunction(copy(d))
        excitation!(ψ, f, e, 2)
        @test Set(keys(ψ)) == Set([
            0b000000_11111_0000_000000_11111_0000,
            0b000000_11111_1111_000000_11111_1111,
            0b000000_11111_0000_000000_11110_0000,
            0b000000_11111_0000_000001_11111_0000,
            0b000000_11110_0000_000000_11111_0000,
            0b000001_11111_0000_000000_11111_0000,
            0b000000_11111_0000_000000_11100_0000,
            0b000000_11111_0000_000011_11111_0000,
            0b000000_11100_0000_000000_11111_0000,
            0b000011_11111_0000_000000_11111_0000,
            0b000000_11111_0000_000001_11110_0000,
            0b000001_11110_0000_000000_11111_0000,
            0b000000_11110_0000_000000_11110_0000,
            0b000001_11111_0000_000001_11111_0000,
            0b000001_11111_0000_000000_11110_0000,
        ])

        ψ = Wavefunction(copy(d))
        excitation!(ψ, f, e, 3)
        @test Set(keys(ψ)) == Set([
            0b000000_11111_0000_000000_11111_0000,
            0b000000_11111_1111_000000_11111_1111,
            0b000000_11111_0000_000000_11110_0000,
            0b000000_11111_0000_000001_11111_0000,
            0b000000_11110_0000_000000_11111_0000,
            0b000001_11111_0000_000000_11111_0000,
            0b000000_11111_0000_000000_11100_0000,
            0b000000_11111_0000_000011_11111_0000,
            0b000000_11100_0000_000000_11111_0000,
            0b000011_11111_0000_000000_11111_0000,
            0b000000_11111_0000_000001_11110_0000,
            0b000001_11110_0000_000000_11111_0000,
            0b000000_11110_0000_000000_11110_0000,
            0b000001_11111_0000_000001_11111_0000,
            0b000001_11111_0000_000000_11110_0000,
            0b000000_11111_0000_000000_11000_0000,
            0b000000_11111_0000_000111_11111_0000,
            0b000000_11000_0000_000000_11111_0000,
            0b000111_11111_0000_000000_11111_0000,
        ])

        ψ = Wavefunction(copy(d))
        excitation!(ψ, f, e, 4)
        @test Set(keys(ψ)) == Set([
            0b000000_11111_0000_000000_11111_0000,
            0b000000_11111_1111_000000_11111_1111,
            0b000000_11111_0000_000000_11110_0000,
            0b000000_11111_0000_000001_11111_0000,
            0b000000_11110_0000_000000_11111_0000,
            0b000001_11111_0000_000000_11111_0000,
            0b000000_11111_0000_000000_11100_0000,
            0b000000_11111_0000_000011_11111_0000,
            0b000000_11100_0000_000000_11111_0000,
            0b000011_11111_0000_000000_11111_0000,
            0b000000_11111_0000_000001_11110_0000,
            0b000001_11110_0000_000000_11111_0000,
            0b000000_11110_0000_000000_11110_0000,
            0b000001_11111_0000_000001_11111_0000,
            0b000001_11111_0000_000000_11110_0000,
            0b000000_11111_0000_000000_11000_0000,
            0b000000_11111_0000_000111_11111_0000,
            0b000000_11000_0000_000000_11111_0000,
            0b000111_11111_0000_000000_11111_0000,
        ])

        ψ = Wavefunction(copy(d))
        @test_throws ArgumentError excitation!(ψ, f, e, -1)
    end # excitation!

    @testset "colorprint" begin
        s = sprint(colorprint, zero(UInt64), 1, 2, 3, 4)
        @test s == bitstring(zero(UInt64))
        @test_throws ArgumentError colorprint(zero(UInt64), 0, 0, 0, 31)
        @test_throws ArgumentError colorprint(zero(UInt64), -1, 0, 0, 0)
        @test_throws ArgumentError colorprint(zero(UInt64), 0, -1, 0, 0)
        @test_throws ArgumentError colorprint(zero(UInt64), 0, 0, -1, 0)
        @test_throws ArgumentError colorprint(zero(UInt64), 0, 0, 0, -1)
    end # colorprint

    @testset "mul_excitation" begin
        f, e = mask_fe(UInt64, 2, 3, 4) # bi in bit component
        fs = FockSpace(Orbitals(9), FermionicSpin(1//2)) # 2+3+4 sites
        n = occupations(fs)
        H = Operator(fs)
        for i in 1:9
            H += Float64(i) * n[i, -1//2]
        end
        for i in 10:18
            H += Float64(i) * n[mod1(i, 9), 1//2]
        end
        d = Dict{UInt64,Float64}(
            0b0000_111_00_0000_111_00 => 1.0,
            0b0000_111_00_0000_111_01 => 1.0,
            0b0000_111_00_0000_110_00 => 1.0,
            0b0000_111_00_0001_111_00 => 1.0,
            0b0001_011_00_0000_111_00 => 1.0,
        )
        ψ = Wavefunction(d)

        ϕ = mul_excitation(H, ψ, f, e, 0)
        @test ϕ == Wavefunction(
            Dict{UInt64,Float64}(
                0b0000_111_00_0000_111_00 => 51.0, 0b0000_111_00_0000_111_01 => 52.0
            ),
        )

        ϕ = mul_excitation(H, ψ, f, e, 1)
        @test ϕ == Wavefunction(
            Dict{UInt64,Float64}(
                0b0000_111_00_0000_111_00 => 51.0,
                0b0000_111_00_0000_111_01 => 52.0,
                0b0000_111_00_0000_110_00 => 48.0,
                0b0000_111_00_0001_111_00 => 57.0,
            ),
        )

        ϕ = mul_excitation(H, ψ, f, e, 2)
        @test ϕ == Wavefunction(
            Dict{UInt64,Float64}(
                0b0000_111_00_0000_111_00 => 51.0,
                0b0000_111_00_0000_111_01 => 52.0,
                0b0000_111_00_0000_110_00 => 48.0,
                0b0000_111_00_0001_111_00 => 57.0,
                0b0001_011_00_0000_111_00 => 52.0,
            ),
        )
    end # mul_excitation

    @testset "diffkeys" begin
        ϕ1 = Wavefunction(Dict(zero(UInt64) => 1, one(UInt64) => 1))
        ϕ2 = Wavefunction(Dict(zero(UInt64) => 1))
        @test diffkeys(ϕ1, ϕ2) == Set(one(UInt64))
        @test diffkeys(ϕ2, ϕ1) == Set{UInt64}()
    end # diffkeys
end # Debug
